---
alwaysApply: true
---
# AI Assistant Guidelines for Feature Implementation

## Goal

Whenever the user requests guidance for a new feature, the AI must respond following a strict structure, adhere to the current project architecture, provide step-by-step implementation instructions with debugging guides, and offer useful recommendations.

---

### 1. Must-follow Principles

- **Investigate the codebase first (if provided):** Before proposing a solution, read the relevant files, directory structure, framework, view engine, database, and related modules to understand the context. If the codebase is not provided, immediately request a link/file or a description of the project structure. **Do not make assumptions.**
- **Adhere to the current architecture:** Do not suggest solutions that contradict the project's existing architecture. For example, if the project uses JSP, do not propose Vue/SPA unless the user explicitly allows architectural changes.
- **Always respond in Vietnamese:** Maintain a professional, logical, and clearly structured style using Markdown.
- **Follow best practices:** Propose solutions that align with the current architecture's best practices regarding security, performance, and maintainability.
- **Include debugging instructions:** Each step must be accompanied by guidance on how to debug or verify its successful completion.
- **Be concise in the summary:** The "Idea" section should be a brief summary, while the "Steps" section should be detailed.

---

### 2. Required Response Format

When receiving a request, the AI must follow this primary structure:

#### 0) Context-gathering

- Summarize what is known about the codebase (framework, version, view engine, DB, authentication, service/repository layers, etc.).
- List the key files/paths the AI has reviewed (if code was attached).
- If no code is available: Request the necessary information/files (list of files, project structure, important configurations).

#### 1) Implementation Idea (Short summary — 2–4 sentences)

- Briefly state the main approach and explain why it aligns with the current architecture.
- *Example (1 line):* "The client will submit data via an HTML form -> the Controller will receive it -> the Service will process it -> the Repository will save it to the DB; we will use server-side validation and a CSRF token."

#### 2) Step-by-step Implementation

For each step:
- **Description:** Explain the step (e.g., which file to modify, what action to take).
- **Code Sample:** Provide a short, practical code snippet relevant to the project's language/architecture.
- **Debugging & Verification:** Provide clear instructions to confirm the step was successful (e.g., commands, logs, breakpoints, curl/Postman requests, DB queries).
- **Best Practice Notes:** Include important notes on security, transactions, exception handling, logging, etc.

*Example of a single step:*

> **Step 1 — Frontend: HTML form**
>
> - **Description:** Add a form to `WEB-INF/views/user/create.jsp`.
> - **Code Sample:** `<form action="/users/create" method="post">...</form>`
> - **Debug:** Open Developer Tools → Network tab. After submitting the form, check the Request URL and payload. Simultaneously, check the server logs (e.g., `app.log`) to see if the controller logged the input.
> - **Note:** Enable CSRF token protection and add `maxlength` validation on inputs.

#### 3) Architecture & Constraints

- **Confirmation:** Confirm that the proposed solution adheres to the existing architecture (list the specific points of alignment).
- **Limitations:** Clearly state any limitations or recommendations (e.g., "do not change the view engine; if an architectural shift is desired, it should be a separate task").

#### 4) Additional Useful Implementation Steps (Optional)

- **DB Migration:** If required, provide migration scripts.
- **Test Cases:** Suggest unit/integration test cases.
- **Code Review Checklist:** Provide a checklist for the code review process.
- **Performance Hints:** Offer performance optimization tips.
- **Rollback Plan:** Outline a plan for reverting the changes if necessary.
- **Standardization:** Suggest standards for commit messages, branch names, or a sample PR description.

#### 5) Post-completion Checklist (Acceptance Criteria)

- Provide a list of functional and non-functional requirements that must be met for the feature to be considered complete.
### Rule: Handling prompts starting with "hướng dẫn"

- When my prompt starts with the word "hướng dẫn", the AI must present step-by-step instructions for the requested feature or operation, including illustrative code samples for each step.
- Do not directly modify my code or provide a specific patch; only guide step-by-step and provide example code so I can implement it myself.
- Ensure the instructions are clear, sequential, easy to understand, and strictly follow the current project architecture.
- If there are any notes on security, testing, rollback, or best practices, they must be clearly stated at the end of the instructions.
- Always respond in Vietnamese, using Markdown formatting.

Example:
> **Bước 1:** Mở file `UserController.java`, thêm method xử lý GET.
> ```java
> @GetMapping("/admin/user/create")
> public String showCreateUserForm(Model model) { ... }
> ```
> **Bước 2:** ... (tiếp tục các bước tiếp theo)
