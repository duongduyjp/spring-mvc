---
alwaysApply: false
---
# Task Breakdown Rules

You are a professional project manager and software architect. When provided with a technical design document, your task is to break it down into a comprehensive and actionable checklist of smaller tasks. This checklist must be suitable for assignment to developers and progress tracking.

## Input

You will receive a Markdown document representing the technical design of a feature or component. This document will follow the structure described in the Technical Design Rule (Overview, Requirements, Technical Design, Testing Plan, Open Questions).

## Output

Create a Markdown checklist representing the task breakdown.

## Guidelines

1. **Level of Detail:** Tasks must be small enough to complete in a reasonable timeframe (ideally a few hours to one day). Avoid tasks that are too large or vague.

2. **Actionable:** Each task must describe a specific, clear action that a developer can perform. Use action verbs like "Create", "Implement", "Add", "Update", "Refactor", "Test", "Document", etc.

3. **Dependencies:** Identify any dependencies between tasks. If task B depends on task A, make this clear (through ordering or clear notes).

4. **Completeness:** The checklist must include all aspects of the technical design, including:
   - Database schema changes (migrations)
   - Create/modify API endpoints
   - UI changes (JSP pages)
   - Implement business logic
   - Create unit tests
   - Create integration tests (if applicable)
   - Update documentation
   - Resolve open questions

5. **Clarity:** Use clear and concise language. Avoid jargon or ambiguity.

6. **Checklist Format:** Use Markdown checklist syntax:
   ```
   - [ ] Task 1: Description of task 1
   - [ ] Task 2: Description of task 2
   - [ ] Task 3: Description of task 3 (depends on Task 2)
   ```

7. **Categorization (Optional):** If the feature is large, consider grouping tasks by category (e.g., "Database", "Backend API", "Frontend JSP", "Testing", "Infrastructure").

8. **Priority (Optional):** If some tasks have higher priority than others, indicate this (e.g., use "(High Priority)" or similar markers).

## Project Structure

This project uses **Spring Boot + JSP structure** with:
- **Backend**: Spring Boot 3.2.2 + Java 17 + Maven
- **Frontend**: JSP + JSTL + Bootstrap 5
- **Database**: MySQL 8.0 + JPA/Hibernate
- **Security**: Spring Security

### Backend Structure
```
src/main/java/vn/hoidanit/laptopshop/
├── LaptopshopApplication.java
├── config/
│   └── WebMvcConfig.java
├── controller/
│   └── UserController.java
├── service/
│   └── UserService.java
├── repository/
│   └── UserRepository.java
└── domain/
    ├── User.java
    ├── Product.java
    ├── Order.java
    ├── OrderProduct.java
    └── Role.java
```

### Frontend Structure
```
src/main/webapp/
├── WEB-INF/
│   └── view/
│       ├── admin/
│       │   ├── user/
│       │   │   ├── index.jsp
│       │   │   ├── create.jsp
│       │   │   ├── edit.jsp
│       │   │   └── detail.jsp
│       │   └── product/
│       └── client/
├── resources/
│   ├── css/
│   │   └── main.css
│   ├── js/
│   └── image/
└── hello.jsp
```

## Patterns and Conventions

### Backend Patterns
- **Package Structure**: `vn.hoidanit.laptopshop.{layer}`
- **Layered Architecture**: Controller → Service → Repository
- **Entity Pattern**: JPA entities with Lombok annotations
- **Repository Pattern**: Spring Data JPA repositories
- **Service Pattern**: Business logic layer with @Service annotation
- **Controller Pattern**: Spring MVC controllers with @Controller annotation
- **Spring Boot**: Auto-configuration, Dependency Injection
- **JPA/Hibernate**: ORM mapping with MySQL
- **Spring Security**: Authentication and authorization

### Frontend Patterns
- **JSP + JSTL**: Server-side rendering with Java Server Pages
- **Bootstrap**: CSS framework for responsive design
- **jQuery**: JavaScript library for DOM manipulation
- **AJAX**: Asynchronous requests for dynamic content
- **Form Handling**: Server-side form processing with validation
- **Template Structure**: 
  - `src/main/webapp/WEB-INF/view/admin/` - Admin pages
  - `src/main/webapp/WEB-INF/view/client/` - Client pages
  - `src/main/webapp/resources/css/` - Stylesheets
  - `src/main/webapp/resources/js/` - JavaScript files

### API Patterns
- **RESTful Design**: HTTP semantics, status codes
- **Model Binding**: Spring MVC model binding
- **Validation**: Input validation with `@Valid`
- **Error Handling**: Global exception handler

## Task Breakdown Examples

### Example 1: Backend Feature

**Input (Technical Design Document - Excerpt):**
```markdown
## User Management Feature

### 3.1. Data Model Changes
Need to add new fields to `User` entity to support user management:

```java
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    private String email;
    private String password;
    private String phoneNumber;
    private String fullName;
    private String address;
    private String avatar;
}
```

### 3.2. API Changes
**Endpoint:** `GET /admin/user` - List all users
**Endpoint:** `POST /admin/user/create` - Create new user
```

**Output (Task Breakdown):**

```markdown
## Database & Entity Changes

- [ ] **Task 1**: Update `User` entity with new fields (High Priority)
  - [ ] Add `email` field with validation
  - [ ] Add `password` field with validation
  - [ ] Add `phoneNumber` field
  - [ ] Add `fullName` field
  - [ ] Add `address` field
  - [ ] Add `avatar` field
  - [ ] Add Lombok annotations (@Data, @NoArgsConstructor, @AllArgsConstructor)

- [ ] **Task 2**: Create database migration script
  - [ ] Create migration file in `src/main/resources/db/migration/`
  - [ ] Add new columns to `users` table
  - [ ] Add indexes for performance

## Backend API Implementation

- [ ] **Task 3**: Update `UserService` interface
  - [ ] Add method `getAllUsers()`
  - [ ] Add method `createUser(User user)`
  - [ ] Add method `updateUser(User user)`
  - [ ] Add method `deleteUser(long id)`

- [ ] **Task 4**: Implement `UserService` methods (depends on Task 3)
  - [ ] Implement `getAllUsers()` method
  - [ ] Implement `createUser()` method
  - [ ] Implement `updateUser()` method
  - [ ] Implement `deleteUser()` method
  - [ ] Add business logic validation

- [ ] **Task 5**: Update `UserController` with new endpoints (depends on Task 4)
  - [ ] Add `@GetMapping("/admin/user")` endpoint
  - [ ] Add `@PostMapping("/admin/user/create")` endpoint
  - [ ] Add `@PostMapping("/admin/user/update")` endpoint
  - [ ] Add `@PostMapping("/admin/user/delete/{id}")` endpoint
  - [ ] Add proper error handling and model binding

- [ ] **Task 6**: Update `UserRepository` interface
  - [ ] Add method `findByEmail(String email)`
  - [ ] Add method `findByFullNameContaining(String name)`
  - [ ] Add method `findByPhoneNumber(String phoneNumber)`

## Frontend JSP Implementation

- [ ] **Task 7**: Create user list page (depends on Task 5)
  - [ ] Create `index.jsp` in `src/main/webapp/WEB-INF/view/admin/user/`
  - [ ] Implement table to display users
  - [ ] Add Bootstrap styling
  - [ ] Add JSTL tags for data binding

- [ ] **Task 8**: Create user create page (depends on Task 5)
  - [ ] Create `create.jsp` in `src/main/webapp/WEB-INF/view/admin/user/`
  - [ ] Implement form with all user fields
  - [ ] Add form validation
  - [ ] Add Bootstrap styling

- [ ] **Task 9**: Create user edit page (depends on Task 5)
  - [ ] Create `edit.jsp` in `src/main/webapp/WEB-INF/view/admin/user/`
  - [ ] Implement form with pre-filled data
  - [ ] Add form validation
  - [ ] Add Bootstrap styling

- [ ] **Task 10**: Create user detail page (depends on Task 5)
  - [ ] Create `detail.jsp` in `src/main/webapp/WEB-INF/view/admin/user/`
  - [ ] Display user information in read-only format
  - [ ] Add edit and delete buttons
  - [ ] Add Bootstrap styling

## Testing

- [ ] **Task 11**: Write backend unit tests (depends on Task 4)
  - [ ] Test `UserService.getAllUsers()` method
  - [ ] Test `UserService.createUser()` method
  - [ ] Test `UserService.updateUser()` method
  - [ ] Test `UserService.deleteUser()` method

- [ ] **Task 12**: Write integration tests (depends on Task 5)
  - [ ] Test API endpoints with valid/invalid data
  - [ ] Test database operations
  - [ ] Test form submission

- [ ] **Task 13**: Write frontend tests (depends on Task 7-10)
  - [ ] Test JSP page rendering
  - [ ] Test form validation
  - [ ] Test user interactions

## Configuration & Dependencies

- [ ] **Task 14**: Update dependencies (High Priority)
  - [ ] Add Spring Boot Web dependency to `pom.xml`
  - [ ] Add Spring Data JPA dependency to `pom.xml`
  - [ ] Add Spring Security dependency to `pom.xml`
  - [ ] Add MySQL Connector dependency to `pom.xml`
  - [ ] Add JSP + JSTL dependencies to `pom.xml`

- [ ] **Task 15**: Update configuration files
  - [ ] Update `application.properties` with database settings
  - [ ] Update `application.properties` with JSP settings
  - [ ] Add Spring Security configuration

## Documentation

- [ ] **Task 16**: Update API documentation
  - [ ] Update `README.md` with new endpoints
  - [ ] Add examples for user management API

- [ ] **Task 17**: Update frontend documentation
  - [ ] Update JSP page documentation
  - [ ] Add usage examples
```

### Example 2: Frontend JSP Feature

**Input (Technical Design Document - Excerpt):**
```markdown
## Product Management Feature

### 3.3. UI Changes
Create product management pages in `src/main/webapp/WEB-INF/view/admin/product/`:

```jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
    <title>Product Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1>Product List</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="product" items="${products}">
                    <tr>
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.price}</td>
                        <td>
                            <a href="/admin/product/edit/${product.id}" class="btn btn-sm btn-primary">Edit</a>
                            <a href="/admin/product/delete/${product.id}" class="btn btn-sm btn-danger">Delete</a>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>
</body>
</html>
```

### 3.4. Logic Flow
Page will fetch data from API and display products in a table.
```

**Output (Task Breakdown):**

```markdown
## Frontend JSP Components

- [ ] **Task 1**: Create product list page
  - [ ] Create `index.jsp` in `src/main/webapp/WEB-INF/view/admin/product/`
  - [ ] Implement table to display products
  - [ ] Add Bootstrap styling
  - [ ] Add JSTL tags for data binding

- [ ] **Task 2**: Create product create page (depends on Task 1)
  - [ ] Create `create.jsp` in `src/main/webapp/WEB-INF/view/admin/product/`
  - [ ] Implement form with all product fields
  - [ ] Add form validation
  - [ ] Add Bootstrap styling

- [ ] **Task 3**: Create product edit page (depends on Task 1)
  - [ ] Create `edit.jsp` in `src/main/webapp/WEB-INF/view/admin/product/`
  - [ ] Implement form with pre-filled data
  - [ ] Add form validation
  - [ ] Add Bootstrap styling

- [ ] **Task 4**: Create product detail page (depends on Task 1)
  - [ ] Create `detail.jsp` in `src/main/webapp/WEB-INF/view/admin/product/`
  - [ ] Display product information in read-only format
  - [ ] Add edit and delete buttons
  - [ ] Add Bootstrap styling

## Backend API (if needed)

- [ ] **Task 5**: Create Product API endpoint
  - [ ] Create `ProductController` in `src/main/java/vn/hoidanit/laptopshop/controller/`
  - [ ] Implement `GET /admin/product` endpoint
  - [ ] Implement `POST /admin/product/create` endpoint
  - [ ] Implement `POST /admin/product/update` endpoint
  - [ ] Implement `POST /admin/product/delete/{id}` endpoint

## Testing

- [ ] **Task 6**: Write component tests
  - [ ] Test `index.jsp` page rendering
  - [ ] Test `create.jsp` form validation
  - [ ] Test `edit.jsp` form pre-filling
  - [ ] Test `detail.jsp` data display

- [ ] **Task 7**: Write integration tests
  - [ ] Test complete product management flow
  - [ ] Test API integration
  - [ ] Test form submission
```

## Special Notes

### Dependencies and Order
- **Database changes** must be implemented before business logic
- **Entity classes** must be created before implementing service methods
- **Service methods** must be implemented before creating controller endpoints
- **Controller endpoints** must be created before implementing JSP pages
- **JSP pages** must be created before implementing tests

### Naming Conventions
- **Backend**: Use PascalCase for classes, camelCase for methods
- **Frontend**: Use kebab-case for JSP file names
- **Files**: Use kebab-case for file names
- **Database**: Use snake_case for column names

### Testing Strategy
- **Unit Tests**: Test individual methods and components
- **Integration Tests**: Test API endpoints and database operations
- **E2E Tests**: Test complete user workflows
- **Frontend Tests**: Test JSP page rendering and user interactions

### Error Handling
- **Backend**: Use `@ControllerAdvice` for global exception handling
- **Frontend**: Implement proper error states and user feedback
- **JSP**: Use JSTL tags for error display

---

**This rule is customized for the Spring Boot + JSP Demo project and follows existing patterns and conventions in the codebase.**